% ----------------------------------------------------------------------------------------------------------------
% Napisati predikat 'prebroj' koji za datu listu  listi proizvodi listu duzinu tih listi.
% ----------------------------------------------------------------------------------------------------------------
duzina([], 0).
duzina([G|R], N) :-
    duzina(R, N1),
    N is N1 + 1.

prebroj([], []).
prebroj([G|R], [N|R1]) :-
    duzina(G, N),
    prebroj(R, R1).

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji proverava da li je prosledjena lista palindrom.
% ----------------------------------------------------------------------------------------------------------------
% obrni([1,2,3], X, []).
obrni([], Z, Z).
obrni([H|T], Z, Acc) :- obrni(T, Z, [H|Acc]).

poredi_liste([], []).
poredi_liste([H|T1], [H|T2]) :-
    poredi_liste(T1, T2).

palindrom(X) :-
    obrni(X, XObrnuto, []),
    poredi_liste(X, XObrnuto).
    

% ----------------------------------------------------------------------------------------------------------------
% Napisati predikat minmax koji racuna minimum maksimuma elemanata liste listi.
% minmax([[1, 2, 3], [3, 4, 5], [2, 3, 4]], X).
% ----------------------------------------------------------------------------------------------------------------
% Pravimo pomocni predikat koji vraca maksimalni element u okviru prosledjene liste.
maxL([X], X).
maxL([X|R], X) :-
    maxL(R, X1),
    X1 < X.
maxL([X|R], X1) :-
    maxL(R, X1),
    X1 >= X.

minmax([G], X) :- maxL(G, X).
minmax([G|R], Y) :-
    maxL(G, Y),
    minmax(R, X),
    X >= Y.
minmax([G|R], X):-
    maxL(G, Y),
    minmax(R, X),
    X < Y.

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji ciklicno rotira listu ulevo za N mesta.
% ----------------------------------------------------------------------------------------------------------------
ubaci_na_kraj(X, [], [X]).
ubaci_na_kraj(X, [G|R], [G|R1]) :- ubaci_na_kraj(X, R, R1).

rotiraj(L, 0, L) :- !.
rotiraj([G|R], N, L) :-
    ubaci_na_kraj(G, R, R1),
    N1 is N - 1,
    rotiraj(R1, N1, L).

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji ispisuje prvih N redova paskalovog trougla.
% ----------------------------------------------------------------------------------------------------------------
ispisi_listu([X|R]):- write(X), write(' '), ispisi_listu(R).
ispisi_listu([]):- nl.

%paskalov trougao
pascal(N):- pascal(N, [1]).

pascal(0, L):- ispisi_listu(L), !.
pascal(N, L):-
    ispisi_listu(L),
    generisi_novu(L, L1),
    N1 is N - 1,
    pascal(N1, L1).

generisi_novu([X|R], [X|R1]) :- generisi_novu1([X|R], R1).
generisi_novu1([X, Y|R], [Z|R1]) :- Z is X + Y, generisi_novu1([Y|R], R1).
generisi_novu1([X], [X]) :- !.

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji vrsi ravnanje liste (eng. flatten).
% izravnaj([])
% ----------------------------------------------------------------------------------------------------------------
% Resenje 1
izravnaj([], []).
izravnaj([H|R], L):-
    is_list(H),
    !,
    izravnaj(H, L1),
    izravnaj(R, L2),
    append(L1, L2, L).
izravnaj([H|R], [H|R1]):- izravnaj(R, R1).

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji izlistava kombinacije duzine N.
% ----------------------------------------------------------------------------------------------------------------
kombinacije(0, []) :- !.
kombinacije(N, [0|R]) :- N1 is N - 1,
kombinacije(N1, R).
kombinacije(N, [1|R]) :- N1 is N - 1,
kombinacije(N1, R).

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji ispisuje sve permutacije duzine N.
% ----------------------------------------------------------------------------------------------------------------
% Proverava da li je X clan prosledjene liste.
clan(X, [X|_]).
clan(X, [_|R]):- clan(X, R).

% Brise element X iz liste kao argument.
brisi(X, [], []).
brisi(X, [X|R], R).
brisi(X, [G|R], [G|R1]) :-
    G \== X,
    brisi(X, R, R1).

permutacije([], []).
permutacije(L, [X|R]) :-
    clan(X, L),
    brisi(X, L, L1),
    permutacije(L1, R).

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji proverava da li je lista sortirana.
% ----------------------------------------------------------------------------------------------------------------
sortirana([]) :- !.
sortirana([_]) :- !.
sortirana([X, Y|L]) :-
    Y >= X,
    sortirana([Y|L]).

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji proverava da li se broj 'b' pojavljuje u listi
% izmedju brojeva 'a' i 'c'.
% ----------------------------------------------------------------------------------------------------------------
izmedju(A, B, C, [G|R]) :-
    G \== A,
    izmedju(A, B, C, R).
izmedju(A, B, C, [A|R]) :- izmedju(B, C, R).

izmedju(B, C, [G|R]) :-
    B \== G,
    izmedju(B, C, R).
izmedju(B, C, [B|R]) :- izmedju(C, R).

izmedju(C, [G|R]) :- G \== C, izmedju(C, R).
izmedju(C, [C|_]).

% ----------------------------------------------------------------------------------------------------------------
% Napisati prolog predikat koji iz liste brojeve izdvaja elemente ciji su indeksi
% stepeni dvojke. Pretpostaviti da indeksi pocinju od 1.
% ----------------------------------------------------------------------------------------------------------------
izdvoj_stepene_dvojke(L, X) :- izdvoj_stepene_dvojke(L, 1, 1, X).
izdvoj_stepene_dvojke([], _, _, []).
izdvoj_stepene_dvojke([G|R], N, N, [G|R1]) :-
    N1 is N + 1,
    N2 is N * 2,
    izdvoj_stepene_dvojke(R, N1, N2, R1).
izdvoj_stepene_dvojke([G|R], I, S, L) :-
    I \== S,
    I1 is I + 1,
    izdvoj_stepene_dvojke(R, I1, S, L).
    

% ----------------------------------------------------------------------------------------------------------------
% DOMACI: Napisati predikat koji u listi L pronalazi pojavljivanja liste A i zamenjuje ih listom B
% ----------------------------------------------------------------------------------------------------------------

% ----------------------------------------------------------------------------------------------------------------
% DOMACI: Implementirati quick sort.
% ----------------------------------------------------------------------------------------------------------------

% ----------------------------------------------------------------------------------------------------------------
% DOMACI: Implementirati merge sort.
% ----------------------------------------------------------------------------------------------------------------

% ----------------------------------------------------------------------------------------------------------------
% DOMACI: Napisati prolog predikat koji za dato N generise listu N fibonacijevih brojeva.
% Pretpostaviti da F1=1 i F2=1.
% ----------------------------------------------------------------------------------------------------------------